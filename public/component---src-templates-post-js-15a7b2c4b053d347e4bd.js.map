{"version":3,"sources":["webpack:///./src/templates/post.js","webpack:///./src/components/Disqus/Disqus.js","webpack:///./src/components/Disqus/index.js","webpack:///./src/utils/sharedPropTypes.js"],"names":["Post","props","post","data","wordpressPost","id","title","url","location","href","img","featured_media","localFile","childImageSharp","resolutions","src","tranlation","acf","translation","thumbnail","description","excerpt","small","css","largeMgBottom","className","mgBottom","secondaryFont","linkStyle","to","secondTitle","dangerouslySetInnerHTML","__html","text","dateTime","date","alt","content","pageQuery","Disqus","useEffect","d","s","document","createElement","setAttribute","Date","head","body","appendChild","disqusConfig","PropTypes","shape","string","isRequired"],"mappings":"4eA4DeA,UA5CF,SAAAC,GACX,IAAMC,EAAOD,EAAME,KAAKC,cAClBC,EAAKH,EAAKG,GACVC,EAAQJ,EAAKI,MACbC,EAAMN,EAAMO,SAASC,KACrBC,EAAMR,EAAKS,eAAeC,UAAUC,gBAAgBC,YAAYC,IAChEC,EAAad,EAAKe,IAAIC,YAAYX,IAExC,OACE,YAAC,IAAD,CAAUY,UAAWT,EAAKJ,MAAOJ,EAAKI,MAAOc,YAAalB,EAAKmB,SAC7D,YAAC,IAAD,CAAWC,OAAK,GACd,uBAASC,IAAKC,IAAeC,UAAU,gBACrC,mBAAKF,IAAKG,KACR,YAAC,OAAD,CACEH,IAAKA,YAAF,KACEI,IAAeC,MAEpBC,GAAIb,GAJN,kCASF,kBAAIO,IAAKO,IAAaC,wBAAyB,CAAEC,OAAQ1B,KACzD,iBACEiB,IAAKA,YAAF,IACCU,MAFN,eAOE,oBAAMC,SAAUhC,EAAKiC,MAArB,IAA6BjC,EAAKiC,OAEnCzB,GAAO,mBAAKK,IAAKL,EAAK0B,IAAI,SAE3B,mBAAKb,IAAKU,IAAMF,wBAAyB,CAAEC,OAAQ9B,EAAKmC,YAE1D,YAAC,IAAD,CAAQ9B,IAAKA,EAAKF,GAAIA,OAUvB,IAAMiC,EAAS,c,2DC/BPC,EAZA,SAAC,GAAiB,IAAfhC,EAAc,EAAdA,IAAKF,EAAS,EAATA,GAIrB,OAHAmC,qBAAU,YAjBS,SAAC,GAAiB,IAQ/BC,EACFC,EATgC,EAAdnC,IAAc,EAATF,GAQrBoC,EAAIE,UACND,EAAID,EAAEG,cAAc,WACpB7B,IAAM,mDACR2B,EAAEG,aAAa,kBAAmB,IAAIC,OACrCL,EAAEM,MAAQN,EAAEO,MAAMC,YAAYP,GAM/BQ,CAAa,CAAE3C,MAAKF,SACnB,CAACE,EAAKF,IACF,yBAAKA,GAAG,mBCvBjB,mC,kCCAA,yBAGY8C,IAAUC,MAAM,CACxB3C,KAAM0C,IAAUE,SAEZF,IAAUC,MAAM,CACpBhD,cAAe+C,IAAUC,MAAM,CAC7B/C,GAAI8C,IAAUE,OACd/C,MAAO6C,IAAUE,OACjBhB,QAASc,IAAUE,OACnBhC,QAAS8B,IAAUE,OACnBlB,KAAMgB,IAAUE,WAEjBC","file":"component---src-templates-post-js-15a7b2c4b053d347e4bd.js","sourcesContent":["/** @jsx jsx */\nimport { jsx, css } from \"@emotion/core\";\nimport { graphql, Link } from \"gatsby\";\nimport Template from \"../components/Template\";\nimport {\n  Container,\n  secondTitle,\n  text,\n  largeMgBottom,\n  mgBottom,\n  linkStyle,\n  secondaryFont\n} from \"../design\";\nimport Disqus from \"../components/Disqus\";\nimport { postPropTypes } from \"../utils/sharedPropTypes\";\n\nconst Post = props => {\n  const post = props.data.wordpressPost;\n  const id = post.id;\n  const title = post.title;\n  const url = props.location.href;\n  const img = post.featured_media.localFile.childImageSharp.resolutions.src;\n  const tranlation = post.acf.translation.url;\n\n  return (\n    <Template thumbnail={img} title={post.title} description={post.excerpt}>\n      <Container small>\n        <article css={largeMgBottom} className=\"post-content\">\n          <div css={mgBottom}>\n            <Link\n              css={css`\n                ${(secondaryFont, linkStyle)}\n              `}\n              to={tranlation}\n            >\n              Read this article in English.\n            </Link>\n          </div>\n          <h1 css={secondTitle} dangerouslySetInnerHTML={{ __html: title }} />\n          <p\n            css={css`\n              ${text};\n              color: var(--gray);\n            `}\n          >\n            Publicado em\n            <time dateTime={post.date}> {post.date}</time>\n          </p>\n          {img && <img src={img} alt=\"test\" />}\n\n          <div css={text} dangerouslySetInnerHTML={{ __html: post.content }} />\n        </article>\n        <Disqus url={url} id={id} />\n      </Container>\n    </Template>\n  );\n};\n\nPost.propTypes = postPropTypes;\n\nexport default Post;\n\nexport const pageQuery = graphql`\n  query($id: String!) {\n    wordpressPost(id: { eq: $id }) {\n      id\n      title\n      content\n      excerpt\n      date(formatString: \"MM-DD-YYYY\")\n      featured_media {\n        localFile {\n          childImageSharp {\n            resolutions(width: 670, height: 500) {\n              src\n            }\n          }\n        }\n      }\n      acf {\n        translation {\n          url\n        }\n      }\n    }\n  }\n`;\n","import React, { useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst disqusConfig = ({ url, id }) => {\n  // eslint-disable-next-line no-unused-vars\n  var disqus_config = function() {\n    this.page.url = url; // Replace PAGE_URL with your page's canonical URL variable\n    this.page.identifier = id; // Replace PAGE_IDENTIFIER with your page's unique identifier variable\n  };\n\n  (function() {\n    var d = document,\n      s = d.createElement(\"script\");\n    s.src = \"https://sergiojunior-netlify.disqus.com/embed.js\";\n    s.setAttribute(\"data-timestamp\", +new Date());\n    (d.head || d.body).appendChild(s);\n  })();\n};\n\nconst Disqus = ({ url, id }) => {\n  useEffect(() => {\n    disqusConfig({ url, id });\n  }, [url, id]);\n  return <div id=\"disqus_thread\"></div>;\n};\n\nDisqus.propTypes = {\n  url: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired\n};\n\nexport default Disqus;\n","export { default } from \"./Disqus\";\n","import PropTypes from \"prop-types\";\n\nexport const postPropTypes = {\n  location: PropTypes.shape({\n    href: PropTypes.string\n  }),\n  data: PropTypes.shape({\n    wordpressPost: PropTypes.shape({\n      id: PropTypes.string,\n      title: PropTypes.string,\n      content: PropTypes.string,\n      excerpt: PropTypes.string,\n      date: PropTypes.string\n    })\n  }).isRequired\n};\n"],"sourceRoot":""}