{"componentChunkName":"component---src-templates-post-en-js","path":"/blog/posts_en/replacing-redux-with-react-hooks/","result":{"data":{"wordpressWpPostsEn":{"id":"cf00640f-081f-5abd-87aa-39a8927d6be8","title":"Replacing Redux with React Hooks","content":"\n<p>In 2019 I was learning how to use <a rel=\"noreferrer noopener\" aria-label=\"React Hooks (abre numa nova aba)\" href=\"https://reactjs.org/docs/hooks-intro.html\" target=\"_blank\">React Hooks</a> and decided to replace the Redux library with React Hooks to manage the state of a simple application that I was building at that time. I didn’t know how I would do that, however, in the end, it worked pretty well.</p>\n\n\n\n<p>I kept the concepts of <em>reducer, actions, types, middleware, mapStateToProps</em> and I wrote <a rel=\"noreferrer noopener\" aria-label=\"an article (abre numa nova aba)\" href=\"https://medium.com/reactbrasil/substituindo-o-redux-pelo-context-api-react-hooks-a70e995daa1d\" target=\"_blank\">an article</a> on Medium showing up how I had done it. And it was published at <a rel=\"noreferrer noopener\" aria-label=\"React Brazil’s Oficial (abre numa nova aba)\" href=\"https://medium.com/reactbrasil\" target=\"_blank\">React Brazil’s oficial account</a> on Medium.</p>\n\n\n\n<p>I was really happy with the community&#8217;s feedback but I felt that I could refactor that code which I wrote one year ago and make it cleaner and organized, so, I ended up rewriting my code example and my article, that became this that you’re reading right now.</p>\n\n\n\n<p>I’m using the same example of a simple counter and authentication. If you want, you can already check <a rel=\"noreferrer noopener\" aria-label=\"the demo (abre numa nova aba)\" href=\"https://replacing-redux-to-hooks.netlify.com/\" target=\"_blank\">the demo</a> and <a rel=\"noreferrer noopener\" aria-label=\"the repository (abre numa nova aba)\" href=\"https://github.com/Sergioamjr/replacing-redux-to-hooks\" target=\"_blank\">the repository</a> with the final code.</p>\n\n\n\n<h3>Show me the code</h3>\n\n\n\n<p>First of all, let&#8217;s create the state of our counter and authentication and also its <em>reducers, types</em> and <em>actions</em>. They follow basically the same structure of Redux. I&#8217;m just using the pattern Ducks to keep everything related in the same file. </p>\n\n\n\n<p>You can read more about this pattern in <a rel=\"noreferrer noopener\" href=\"https://github.com/erikras/ducks-modular-redux\" target=\"_blank\">this link.</a></p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">//src/store/reducers/auth.js\nexport const authDefault = {\n  auth: {\n    isLogged: false,\n    user: {}\n  }\n};\n\nexport const LOGIN = \"LOGIN\";\nexport const LOGOUT = \"LOGOUT\";\n\nconst authReducer = (state = authDefault, action) => {\n  switch (action.type) {\n    case LOGIN:\n      return {\n        auth: {\n          ...state.auth,\n          isLogged: true,\n          user: action.payload\n        }\n      };\n    case LOGOUT:\n      return {\n        auth: {\n          ...state.auth,\n          isLogged: false,\n          user: {}\n        }\n      };\n    default:\n      return state;\n  }\n};\n\nexport const loginAction = user => {\n  return {\n    type: LOGIN,\n    payload: user\n  };\n};\n\nexport const logoutAction = () => {\n  return {\n    type: LOGOUT\n  };\n};\n\nexport default authReducer;\n</code></pre>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">//src/store/reducers/counter.js\nexport const counterDefault = {\n  counter: 0\n};\n\nexport const INCREMENT = \"INCREMENT\";\nexport const DECREMENT = \"DECREMENT\";\nexport const RESET = \"RESET\";\n\nconst counterReducer = (state = counterDefault, action) => {\n  switch (action.type) {\n    case INCREMENT:\n      return {\n        ...state,\n        counter: state.counter + 1\n      };\n    case DECREMENT:\n      return {\n        ...state,\n        counter: state.counter - 1\n      };\n    case RESET:\n      return {\n        counter: 0\n      };\n    default:\n      return state;\n  }\n};\n\nexport const incrementAction = () => {\n  return {\n    type: INCREMENT\n  };\n};\n\nexport const decrementAction = () => {\n  return {\n    type: DECREMENT\n  };\n};\n\nexport const resetAction = () => {\n  return {\n    type: RESET\n  };\n};\n\nexport default counterReducer;</code></pre>\n\n\n\n<p>Now we will create our <em>custom hooks</em>, the first one is the <em>useCombinedReducers</em>, it will be responsible to return an array with all reducers and our store object. We will only use the React hook <em>useReducer</em> to create it.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">//src/store/hooks/useCombinedReducers.js\nimport { useReducer } from \"react\";\nimport counterReducer, { counterDefault } from \"./../reducers/counter\";\nimport authReducer, { authDefault } from \"./../reducers/auth\";\n\nconst useCombinedReducers = () => {\n  const [counterStore, counter] = useReducer(counterReducer, counterDefault);\n  const [authStore, auth] = useReducer(authReducer, authDefault);\n\n  return {\n    store: { ...counterStore, ...authStore },\n    reducers: [counter, auth]\n  };\n};\n\nexport default useCombinedReducers;</code></pre>\n\n\n\n<p>When we add a new object in our store, we will need to edit this file, importing the reducer and default value, passing both to the hook <em>useReducer</em> and returning them in our main function.</p>\n\n\n\n<p>This was the only change that I made compared to Redux, in order to keep our <em>Provider</em> component more dynamic and do not need to edit it again.</p>\n\n\n\n<p>Our second custom hook is the <em>useStore</em>, it will create and provide the context of our application through <em>useContext</em> hook.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">//src/store/hooks/useStore.js\nimport { useContext, createContext } from \"react\";\nimport { authDefault } from \"../reducers/auth\";\nimport { counterDefault } from \"../reducers/counter\";\n\nexport const defaultStore = {\n  store: { ...authDefault, ...counterDefault },\n  dispatch: () => {}\n};\n\nexport const StoreContext = createContext(defaultStore);\nexport default () => {\n  return useContext(storeContext);\n};\n</code></pre>\n\n\n\n<p>With this <em>custom hook</em> will be possible to access directly our store and its dispatch method, besides the component <em>Connect</em> that we will create right now.</p>\n\n\n\n<p>The <em>Connect</em> component will inject the store and the dispatch method in our components. We will use the component <em>StoreContext</em> returned from our custom hook <em>useStore</em>.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-jsx\">//src/store/connect.js\nimport React from \"react\";\nimport { StoreContext } from \"./hooks/useStore\";\n\nconst returnPropsAsDefault = (store, props) => props;\n\nconst Connect = (mapStateToProps = returnPropsAsDefault) => Component => {\n  return function WrapConnect(props) {\n    return (\n      &lt;StoreContext.Consumer>\n        {({ dispatch, store }) => {\n          const storeProps = mapStateToProps(store, props);\n          return &lt;Component {...storeProps} dispatch={dispatch} />;\n        }}\n      &lt;/StoreContext.Consumer>\n    );\n  };\n};\n\nexport default Connect;</code></pre>\n\n\n\n<p>It will work like Redux receiving our component and the mapStateToProps, which is a function that receives the store and the originals props. It is up to you to return the entire store or pick up the objects that you need, like this.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">function mapStateToProps(store, props) {\n  return {\n    ...store,\n    ...props\n  }\n}\n\nexport default Connect(mapStateToProps)(Component)\n</code></pre>\n\n\n\n<p>In case of <em>mapStateToProps</em> is not provided, its default function <em>returnPropsAsDefault</em> will return only the original props and the dispatch method.</p>\n\n\n\n<p>The next component will be our <em>Provider</em>, it will wrap our application and make our store available within it. We will use the <em>custom hook useCombinedReducers</em> to receive the store object and an array with all our reducers.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-jsx\">//src/store/index.js\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport useCombinedReducers from \"./hooks/useCombinedReducers\";\nimport { StoreContext } from \"./hooks/useStore\";\n\nconst Provider = ({ children }) => {\n  const { store, reducers } = useCombinedReducers();\n\n  const triggerDispatchs = action => {\n    for (let i = 0; i &lt; reducers.length; i++) {\n      reducers[i](action);\n    }\n  };\n\n  return (\n    &lt;StoreContext.Provider\n      value={{\n        store,\n        dispatch: triggerDispatchs\n      }}\n    >\n      {children}\n    &lt;/StoreContext.Provider>\n  );\n};\n\nProvider.propTypes = {\n  children: PropTypes.node.isRequired\n};\n\nexport default Provider;\n</code></pre>\n\n\n\n<p>The method <em>triggerDispatchs</em> do a loop in our reducers, passing the <em>action</em> through as a parameter to each one of them.</p>\n\n\n\n<p>We can also add a middleware here, it will intercept our dispatch and we can check its value to trigger a new action or anything.</p>\n\n\n\n<p>It will be basically like this.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">//src/store/middleware.js\nimport { LOGOUT } from \"./reducers/auth\";\nimport { resetAction } from \"./reducers/counter\";\n\nexport default action => dispatch => {\n  if (action.type === LOGOUT) {\n    dispatch(resetAction());\n  }\n\n  dispatch(action);\n};</code></pre>\n\n\n\n<p>It is a closure that receives an action and the dispatch method, in this case, I am triggering the <em>resetAction</em> <em>action</em> if the type is equal <em>LOGOUT</em>, in order to reset our counter on logout.</p>\n\n\n\n<p>To use this middleware we need to edit our <em>Provider</em> component, importing the <em>middleware</em> function, creating the method <em>withMiddleware</em> and replacing the dispatch&#8217;s attribution.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-jsx\">//src/store/index.js\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport useCombinedReducers from \"./hooks/useCombinedReducers\";\nimport { StoreContext } from \"./hooks/useStore\";\nimport middleware from \"./middleware\";\n\nconst Provider = ({ children }) => {\n  const { store, reducers } = useCombinedReducers();\n\n  const triggerDispatchs = action => {\n    for (let i = 0; i &lt; reducers.length; i++) {\n      reducers[i](action);\n    }\n  };\n\n  const withMiddleware = action => {\n    middleware(action)(triggerDispatchs);\n  };\n\n  return (\n    &lt;StoreContext.Provider\n      value={{\n        store,\n        dispatch: withMiddleware\n      }}\n    >\n      {children}\n    &lt;/StoreContext.Provider>\n  );\n};\n\nProvider.propTypes = {\n  children: PropTypes.node.isRequired\n};\n\nexport default Provider;\n</code></pre>\n\n\n\n<p>Now we just need to wrap your application with our <em>Provider</em>, like this.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-jsx\">//src/index.js\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport Provider from \"./store\";\n\nReactDOM.render(\n  &lt;Provider>\n    &lt;App />\n  &lt;/Provider>,\n  document.getElementById(\"root\")\n);</code></pre>\n\n\n\n<h4>Connecting our components</h4>\n\n\n\n<p>At this point, we have everything set up to use the store in our application. Let&#8217;s connect our store in our <em>Counter, Login </em>and<em> Header </em>components.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-jsx\">//src/container/counter.js\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport ConnectTo from \"../store/connect\";\nimport { decrementAction, incrementAction } from \"../store/reducers/counter\";\n\nconst Counter = ({ dispatch, counter }) => {\n  const decrementHandler = () => dispatch(decrementAction());\n  const incrementHandler = () => dispatch(incrementAction());\n\n  return (\n    &lt;div>\n      &lt;p className=\"number color-dark\">{counter}&lt;/p>\n      &lt;div>\n        &lt;button\n          aria-label=\"Minus 1\"\n          className=\"btn m-left-20 m-right-20\"\n          onClick={decrementHandler}\n        >\n          -\n        &lt;/button>\n        &lt;button\n          aria-label=\"More 1\"\n          className=\"btn m-left-20 m-right-20\"\n          onClick={incrementHandler}\n        >\n          +\n        &lt;/button>\n      &lt;/div>\n    &lt;/div>\n  );\n};\n\nCounter.propTypes = {\n  dispatch: PropTypes.func.isRequired,\n  counter: PropTypes.number.isRequired\n};\n\nconst mapStateToProps = ({ counter }, props) => {\n  return {\n    counter,\n    ...props\n  };\n};\n\nexport default ConnectTo(mapStateToProps)(Counter);\n</code></pre>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-jsx\">//src/container/login.js\nimport React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Connect from \"../store/connect\";\nimport { loginAction } from \"../store/reducers/auth\";\n\nconst Login = ({ dispatch }) => {\n  const [name, setName] = useState(\"\");\n  const changeNameHandler = ({ target: { value } }) => setName(value);\n  const onSubmitHandler = () => dispatch(loginAction(name));\n  return (\n    &lt;div>\n      &lt;form>\n        &lt;p className=\"logo p-center m-bottom-20\">\n          Context + useState ={\" \"}\n          &lt;span role=\"img\" aria-label=\"Coração\">\n            ❤️\n          &lt;/span>\n        &lt;/p>\n        &lt;input\n          value={name}\n          onChange={changeNameHandler}\n          type=\"text\"\n          placeholder=\"Name\"\n          className=\"input\"\n        />\n        &lt;button\n          onClick={onSubmitHandler}\n          disabled={!name}\n          className=\"btn w-100\"\n        >\n          Login\n        &lt;/button>\n      &lt;/form>\n    &lt;/div>\n  );\n};\n\nLogin.propTypes = {\n  dispatch: PropTypes.func.isRequired\n};\n\nexport default Connect()(Login);\n</code></pre>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-jsx\">//src/container/header.js\nimport React from \"react\";\nimport { logoutAction } from \"../store/reducers/auth\";\nimport useStore from \"../store/hooks/useStore\";\n\nconst Header = () => {\n  const {\n    dispatch,\n    store: { auth }\n  } = useStore();\n  const logoutHandler = () => dispatch(logoutAction());\n  return (\n    &lt;div className=\"top-position d-flex d-flex-justify-between d-flex-align-center w-100\">\n      &lt;div className=\"container w-100\">\n        &lt;div className=\"d-flex d-flex-justify-between d-flex-align-center w-100\">\n          &lt;p className=\"logo p-center\">\n            Context + useState ={\" \"}\n            &lt;span role=\"img\" aria-label=\"Coração\">\n              ❤️\n            &lt;/span>\n          &lt;/p>\n          &lt;div className=\"d-flex d-flex-align-center\">\n            &lt;p className=\"m-right-10 color-dark\">Hi, {auth.user}&lt;/p>\n            &lt;button onClick={logoutHandler} className=\"btn logout\">\n              Logout\n            &lt;/button>\n          &lt;/div>\n        &lt;/div>\n      &lt;/div>\n    &lt;/div>\n  );\n};\n\nexport default Header;\n</code></pre>\n\n\n\n<p>If you already used Redux before, you must be familiar with what we have here; the <em>Connect</em> inject the dispatch method and our store. We also import the actions to pass them as the dispatch&#8217;s parameter.</p>\n\n\n\n<p>In our <em>Header</em> component, I am using our <em>custom hook useStore</em> to access the store and the dispatch method, instead of <em>Connect</em>. You can use which one you would rather.</p>\n\n\n\n<p>Now let&#8217;s put all those components together and add a conditional to show them, using the authentication object from our store.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-jsx\">//src/app.js\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Counter from \"./container/counter\";\nimport Login from \"./container/login\";\nimport Connect from \"./store/connect\";\nimport Header from \"./container/header\";\n\nconst App = ({ auth }) => {\n  return (\n    &lt;div className=\"full-screen\">\n      &lt;div className=\"d-flex d-flex-align-center d-flex-justify-center h-100\">\n        {auth.isLogged ? (\n          &lt;>\n            &lt;Header />\n            &lt;Counter />\n          &lt;/>\n        ) : (\n          &lt;Login />\n        )}\n      &lt;/div>\n    &lt;/div>\n  );\n};\n\nApp.propTypes = {\n  auth: PropTypes.shape({\n    isLogged: PropTypes.bool\n  }).isRequired\n};\n\nconst mapStateToProps = ({ auth }, props) => {\n  return {\n    auth,\n    ...props\n  };\n};\n\nexport default Connect(mapStateToProps)(App);\n</code></pre>\n\n\n\n<p>And we&#8217;re done. Your app should be working with a store created with React Hooks. </p>\n\n\n\n<p>You can see a demo of our application <a rel=\"noreferrer noopener\" aria-label=\" (abre numa nova aba)\" href=\"https://replacing-redux-to-hooks.netlify.com/\" target=\"_blank\">clicking here.</a></p>\n\n\n\n<p>I need to say, we have two drawbacks, comparing with Redux; we don&#8217;t have an browser extension, like <a rel=\"noreferrer noopener\" aria-label=\"Redux DevTools (abre numa nova aba)\" href=\"https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd?hl=pt-BR\" target=\"_blank\">Redux DevTools</a>, which allow us to debug it, and we don&#8217;t support async actions, like <a rel=\"noreferrer noopener\" aria-label=\"Redux Thunk (abre numa nova aba)\" href=\"https://github.com/reduxjs/redux-thunk\" target=\"_blank\">Redux Thunk</a>.</p>\n\n\n\n<p>And depending on the size and complexity of your application, using Redux might be more performatic then React Hooks.</p>\n\n\n\n<p>I hope you&#8217;re not upset with me because of these points.</p>\n\n\n\n<p>Remembering, all this code is in <a rel=\"noreferrer noopener\" aria-label=\"this repository (abre numa nova aba)\" href=\"https://github.com/Sergioamjr/replacing-redux-to-hooks\" target=\"_blank\">this repository</a>, feel free to download it, use it, share it and let it a star.</p>\n\n\n\n<p>Any suggestion, comment, a critic is well welcome, let me know through the comment&#8217;s box below.</p>\n\n\n\n<p>See you soon.</p>\n","excerpt":"<p>In 2019 I was learning how to use React Hooks and decided to replace the Redux library with React Hooks to manage the state of a simple application that I was building at that time. I didn’t know how I would do that, however, in the end, it worked pretty well. I kept the concepts [&hellip;]</p>\n","date":"01-30-2020","featured_media":{"alt_text":"Roads","caption":"<p>Photo by Denys Nevozhai on Unsplash</p>\n","localFile":{"childImageSharp":{"original":{"width":670,"height":446,"src":"/static/denys-nevozhai-nDfEFYiGrAY-unsplash-3-97d2748570f9bc350d8af6eeda5e9860.jpg"}}}},"acf":{"translation":"/substituindo-redux-por-hooks"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"cf00640f-081f-5abd-87aa-39a8927d6be8","ola":true}}}