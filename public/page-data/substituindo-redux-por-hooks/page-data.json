{"componentChunkName":"component---src-templates-post-js","path":"/substituindo-redux-por-hooks/","result":{"data":{"wordpressPost":{"id":"b435b543-305b-5d2a-9fb5-a4178353189a","title":"Substituindo Redux por Hooks","content":"\n<p>Vamos criar o custom hook <em>useStore</em>, responsável por criar e fornecer nosso context.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">//src/store/hooks/useStore.js\nimport { useContext, createContext } from \"react\";\nimport { authDefault } from \"../reducers/auth\";\nimport { counterDefault } from \"../reducers/counter\";\n\nexport const defaultStore = {\n  store: { ...authDefault, ...counterDefault },\n  dispatch: () => {}\n};\n\nexport const storeContext = createContext(defaultStore);\nexport default () => {\n  return useContext(storeContext);\n};</code></pre>\n\n\n\n<p>Com ele também será possível acessar diretamente nossa store e o dispatch de qualquer lugar da nossa aplicação, além do componente Connect, inspirado no Redux, que vamos criar em breve.</p>\n\n\n\n<p>Agora vamos criar o hook useCombinedReducers, responsável por retornar um array com nossos reducers e um objeto com os valores padrões da nossa store.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">//src/store/hooks/useCombinedReducers.js\nimport { useReducer } from \"react\";\nimport counterReducer, { counterDefault } from \"./../reducers/counter\";\nimport authReducer, { authDefault } from \"./../reducers/auth\";\n\nconst useCombinedReducers = () => {\n  const [counterStore, counter] = useReducer(counterReducer, counterDefault);\n  const [authStore, auth] = useReducer(authReducer, authDefault);\n\n  return {\n    store: { ...counterStore, ...authStore },\n    reducers: [counter, auth]\n  };\n};\n\nexport default useCombinedReducers;</code></pre>\n\n\n\n<p>Sempre que formos adicionar um novo objeto na nossa store, precisaremos apenas alterar esse arquivo, importando o reducer, o objeto padrão, usando o hook useReducer e os retornando na função principal.</p>\n\n\n\n<p>Essa foi a única diferente que eu fiz do padrão do Redux, para tornar nosso Provider mais dinâmico, fazendo um loop entre os reducers pra passar por todos e não precisarmos ficar alterando ele.</p>\n\n\n\n<p>Esse será nosso componente Connect, que injetará nossa store e dispatch nos nossos componente. Aqui usamos o componente StoreContext retornado no nosso hook useStore.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-jsx\">//src/store/connect.js\nimport React from \"react\";\nimport { storeContext as StoreContext } from \"./hooks/useStore\";\n\nconst returnPropsAsDefault = (store, props) => props;\n\nconst Connect = (mapStateToProps = returnPropsAsDefault) => Component => {\n  return function WrapConnect(props) {\n    return (\n      &lt;StoreContext.Consumer>\n        {({ dispatch, store }) => {\n          const storeProps = mapStateToProps(store, props);\n          return &lt;Component {...storeProps} dispatch={dispatch} />;\n        }}\n      &lt;/StoreContext.Consumer>\n    );\n  };\n};\n\nexport default Connect;</code></pre>\n\n\n\n<p>Ele funcionará semelhante ao reducer, recebendo dois parametros, o mapStateToProps e o componente que receberá a store.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">function mapStateToProps(store, props) {\n  return {\n    ...store,\n    ...props\n  }\n}\n\nConnect(mapStateToProps)(Component)\n</code></pre>\n\n\n\n<p>Lembrando que o mapStateToProps é uma função que recebe a store e as props originais. Você é responsável por retornar a store inteira ou selecionar os objetos que precise.</p>\n\n\n\n<p>Caso o mapStateToProps não seja fornecido, sua função padrão returnPropsAsDefault retornará as props originais do Component.</p>\n\n\n\n<p>Você pode ler mais sobre ele <a rel=\"noreferrer noopener\" aria-label=\"nesse link  (abre numa nova aba)\" href=\"https://react-redux.js.org/using-react-redux/connect-mapstate\" target=\"_blank\">nesse link</a>.</p>\n\n\n\n<p>Nosso próximo componente será nosso Provider, responsável por envolver plataforma e tornar nosso context disponível dentro dela. Usamos o hook useCombinedReducers para receber o objeto da store e um array com nossos reducers.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-jsx\">//src/store/index.js\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport useCombinedReducers from \"./hooks/useCombinedReducers\";\nimport { storeContext as StoreContext } from \"./hooks/useStore\";\n\nconst Provider = ({ children }) => {\n  const { store, reducers } = useCombinedReducers();\n\n  const triggerDispatchs = action => {\n    for (let i = 0; i &lt; reducers.length; i++) {\n      reducers[i](action);\n    }\n  };\n\n  return (\n    &lt;StoreContext.Provider\n      value={{\n        store,\n        dispatch: action => triggerDispatchs(action)\n      }}\n    >\n      {children}\n    &lt;/StoreContext.Provider>\n  );\n};\n\nProvider.propTypes = {\n  children: PropTypes.node.isRequired\n};\n\nexport default Provider;\n</code></pre>\n\n\n\n<p>O método triggerDispatchs faz um loop em nossos reducers, passando a action como parâmetro.</p>\n\n\n\n<p>Também podemos adicionar um middleware nesse arquivo, que servirá pra interceptar nosso dispatch e fazer qualquer coisa que queremos, uma requisição, disparar outra action, etc.</p>\n\n\n\n<p>Ele será basicamente assim.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">//src/store/middleware.js\nimport { LOGOUT } from \"./reducers/auth\";\nimport { resetAction } from \"./reducers/counter\";\n\nexport default action => dispatch => {\n  if (action.type === LOGOUT) {\n    dispatch(resetAction());\n  }\n\n  dispatch(action);\n};</code></pre>\n\n\n\n<p>Ele é um closure que recebe a action e o dispatch, onde podemos interceptar nosso dispatch e fazer qualquer coisa que queremos, uma requisição, disparar outra action, etc.</p>\n\n\n\n<p>Nesse caso estou disparando a action resetAction caso o type da action original seja de LOGOUT.</p>\n\n\n\n<p>Pra a utilizarmos, precisamos criar o méotodo withMiddleware e substituir a atribuição do dispatch.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-jsx\">//src/store/index.js\nconst withMiddleware = action => {\n  middleware(action)(triggerDispatchs);\n};\n\nreturn (\n  &lt;StoreContext.Provider\n    value={{\n      store,\n      dispatch: withMiddleware\n    }}\n  >\n    {children}\n  &lt;/StoreContext.Provider>\n);</code></pre>\n\n\n\n<p>Nossos próximos arquivos seguem o modelo do Redux, contendo o valor padrão do seu objeto, os types, reducer e actions, porém, estou usando o padrão Ducks, pra mantermos tudo que é relacionado no mesmo arquivo.</p>\n\n\n\n<p>Você pode ler mais sobre esse pattern <a href=\"https://github.com/erikras/ducks-modular-redux\" target=\"_blank\" rel=\"noreferrer noopener\" aria-label=\"nesse link. (abre numa nova aba)\">nesse link.</a></p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">//src/store/reducers/auth.js\nexport const authDefault = {\n  auth: {\n    isLogged: false,\n    user: {}\n  }\n};\n\nexport const LOGIN = \"LOGIN\";\nexport const LOGOUT = \"LOGOUT\";\n\nconst authReducer = (state = authDefault, action) => {\n  switch (action.type) {\n    case LOGIN:\n      return {\n        auth: {\n          ...state.auth,\n          isLogged: true,\n          user: action.payload\n        }\n      };\n    case LOGOUT:\n      return {\n        auth: {\n          ...state.auth,\n          isLogged: false,\n          user: {}\n        }\n      };\n    default:\n      return state;\n  }\n};\n\nexport const loginAction = user => {\n  return {\n    type: LOGIN,\n    payload: user\n  };\n};\n\nexport const logoutAction = () => {\n  return {\n    type: LOGOUT\n  };\n};\n\nexport default authReducer;\n</code></pre>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">//src/store/reducers/counter.js\nexport const counterDefault = {\n  counter: 0\n};\n\nexport const INCREMENT = \"INCREMENT\";\nexport const DECREMENT = \"DECREMENT\";\nexport const RESET = \"RESET\";\n\nconst counterReducer = (state = counterDefault, action) => {\n  switch (action.type) {\n    case INCREMENT:\n      return {\n        ...state,\n        counter: state.counter + 1\n      };\n    case DECREMENT:\n      return {\n        ...state,\n        counter: state.counter - 1\n      };\n    case RESET:\n      return {\n        counter: 0\n      };\n    default:\n      return state;\n  }\n};\n\nexport const incrementAction = () => {\n  return {\n    type: INCREMENT\n  };\n};\n\nexport const decrementAction = () => {\n  return {\n    type: DECREMENT\n  };\n};\n\nexport const resetAction = () => {\n  return {\n    type: RESET\n  };\n};\n\nexport default counterReducer;</code></pre>\n\n\n\n<p>Nesse ponto já temos tudo o que precisamos pra usar nossa store na nossa aplição.</p>\n\n\n\n<h4>Conectando nossos componentes</h4>\n\n\n\n<p>Vamos começar adicionando nos nossos componente de contador, login e header.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-jsx\">//src/container/counter.js\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport ConnectTo from \"../store/connect\";\nimport { decrementAction, incrementAction } from \"../store/reducers/counter\";\n\nconst Counter = ({ dispatch, counter }) => {\n  const decrementHandler = () => dispatch(decrementAction());\n  const incrementHandler = () => dispatch(incrementAction());\n\n  return (\n    &lt;div>\n      &lt;p className=\"number color-dark\">{counter}&lt;/p>\n      &lt;div>\n        &lt;button\n          aria-label=\"Menos 1\"\n          className=\"btn m-left-20 m-right-20\"\n          onClick={decrementHandler}\n        >\n          -\n        &lt;/button>\n        &lt;button\n          aria-label=\"Mais 1\"\n          className=\"btn m-left-20 m-right-20\"\n          onClick={incrementHandler}\n        >\n          +\n        &lt;/button>\n      &lt;/div>\n    &lt;/div>\n  );\n};\n\nCounter.propTypes = {\n  dispatch: PropTypes.func.isRequired,\n  counter: PropTypes.number.isRequired\n};\n\nconst mapStateToProps = ({ counter }, props) => {\n  return {\n    counter,\n    ...props\n  };\n};\n\nexport default ConnectTo(mapStateToProps)(Counter);\n</code></pre>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-jsx\">//src/container/login.js\nimport React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Connect from \"../store/connect\";\nimport { loginAction } from \"../store/reducers/auth\";\n\nconst Login = ({ dispatch }) => {\n  const [name, setName] = useState(\"\");\n  const changeNameHandler = ({ target: { value } }) => setName(value);\n  const onSubmitHandler = () => dispatch(loginAction(name));\n  return (\n    &lt;div>\n      &lt;form>\n        &lt;p className=\"logo p-center m-bottom-20\">\n          Context + useState ={\" \"}\n          &lt;span role=\"img\" aria-label=\"Coração\">\n            ❤️\n          &lt;/span>\n        &lt;/p>\n        &lt;input\n          value={name}\n          onChange={changeNameHandler}\n          type=\"text\"\n          placeholder=\"Nome\"\n          className=\"input\"\n        />\n        &lt;button\n          onClick={onSubmitHandler}\n          disabled={!name}\n          className=\"btn w-100\"\n        >\n          Entrar\n        &lt;/button>\n      &lt;/form>\n    &lt;/div>\n  );\n};\n\nLogin.propTypes = {\n  dispatch: PropTypes.func.isRequired\n};\n\nexport default Connect()(Login);\n</code></pre>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-jsx\">//src/container/header.js\nimport React from \"react\";\nimport { logoutAction } from \"../store/reducers/auth\";\nimport useStore from \"../store/hooks/useStore\";\n\nconst Header = () => {\n  const {\n    dispatch,\n    store: { auth }\n  } = useStore();\n  const logoutHandler = () => dispatch(logoutAction());\n  return (\n    &lt;div className=\"top-position d-flex d-flex-justify-between d-flex-align-center w-100\">\n      &lt;div className=\"container w-100\">\n        &lt;div className=\"d-flex d-flex-justify-between d-flex-align-center w-100\">\n          &lt;p className=\"logo p-center\">\n            Context + useState ={\" \"}\n            &lt;span role=\"img\" aria-label=\"Coração\">\n              ❤️\n            &lt;/span>\n          &lt;/p>\n          &lt;div className=\"d-flex d-flex-align-center\">\n            &lt;p className=\"m-right-10 color-dark\">Olá, {auth.user}&lt;/p>\n            &lt;button onClick={logoutHandler} className=\"btn logout\">\n              Sair\n            &lt;/button>\n          &lt;/div>\n        &lt;/div>\n      &lt;/div>\n    &lt;/div>\n  );\n};\n\nexport default Header;\n</code></pre>\n\n\n\n<p>Se você já usou Redux, deve ser familiar com o que temos aqui; o componente Connect intejeta o dispatch e a store e importamos as actions pra passarmos como seu parametro.</p>\n\n\n\n<p>No nosso Header eu estou usando o custom hook useStore pra acessar a store e o dispatch, ao invés do Connect. Fique a vontade pra usar qual preferir 🙂</p>\n\n\n\n<p>É isso. Sua aplicação já deve estar funcionando com uma store, criada com hooks nativos do React ao invés do Redux.</p>\n\n\n\n<p>Ressaltando que os únicos pontos negativos comparados ao Redux é a falta de uma extensão do navegador, como o Redux Dev Tools, que nos permita debugar as interações com a store e também a falta de suporte para as actions assincronas, como redux thunk.</p>\n\n\n\n<p>Também preciso dizer que, dependendo do tamanho e complexidade da sua aplicação, usar o Redux poderá ser mais perfomatico do que os hooks.</p>\n\n\n\n<p>Espero que não fique decepcionado comigo por causa desses pontos.</p>\n\n\n\n<p>Todo esse exemplo está <a href=\"https://github.com/Sergioamjr/redux-to-context-usereducer\" target=\"_blank\" rel=\"noreferrer noopener\" aria-label=\"nesse repositório (abre numa nova aba)\">nesse repositório</a>, fique a vontade pra baixa-lo, usa-lo, compartilha-lo e deixar uma star.</p>\n\n\n\n<p>Qualquer sugestão, crítica ou comentário é super bem vindo, comparilhe comigo nos comentários a baixo.</p>\n\n\n\n<p>Até breve.</p>\n","excerpt":"<p>Vamos criar o custom hook useStore, responsável por criar e fornecer nosso context. Com ele também será possível acessar diretamente nossa store e o dispatch de qualquer lugar da nossa aplicação, além do componente Connect, inspirado no Redux, que vamos criar em breve. Agora vamos criar o hook useCombinedReducers, responsável por retornar um array com [&hellip;]</p>\n","date":"01-21-2020","featured_media":{"localFile":{"childImageSharp":{"resolutions":{"src":"/static/502764e6c2ad3e1dae22fc132380de1f/01e6b/person-using-macbook-air-on-table-1181248-1.jpg"}}}},"acf":{"translation":"tste"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"b435b543-305b-5d2a-9fb5-a4178353189a"}}}