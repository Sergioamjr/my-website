{"componentChunkName":"component---src-templates-post-js","path":"/substituindo-redux-por-hooks/","result":{"data":{"wordpressPost":{"id":"b435b543-305b-5d2a-9fb5-a4178353189a","title":"Substituindo Redux por React Hooks","content":"\n<p>Em 2019 eu estava aprendendo os <a href=\"https://pt-br.reactjs.org/docs/hooks-intro.html\" target=\"_blank\" rel=\"noreferrer noopener\" aria-label=\"React Hooks (abre numa nova aba)\">React Hooks</a> e resolvi substituir o gerenciamento de estado de uma simples aplicação que eu estava fazendo de Redux com os Hooks. Eu não fazia idéia de como faria mas no final das contas deu super certo.</p>\n\n\n\n<p>Consegui replicar os conceitos de <em>reducers, actions, types, middleware, mapStateToProps</em> e escrevi <a rel=\"noreferrer noopener\" href=\"https://medium.com/reactbrasil/substituindo-o-redux-pelo-context-api-react-hooks-a70e995daa1d\" target=\"_blank\">um artigo no Medium</a> mostrando como eu havia feito. Depois de divugar na cominidade, ele chegou até ser publicado na conta oficial do <a rel=\"noreferrer noopener\" aria-label=\"React Brasil (abre numa nova aba)\" href=\"https://medium.com/reactbrasil\" target=\"_blank\">React Brasil</a>.</p>\n\n\n\n<p>Eu fiquei muito feliz com o feedback do pessoal mas sentia que poderia refatorar aquele código que eu fiz há um ano atrás, torna-lo mais limpo e organizado, por isso, acabei reescrevendo o exemplo e o artigo, que se tornou esse que você está lendo agora.</p>\n\n\n\n<p>Eu estou usando o mesmo exemplo de um simples contador e autenticação. Caso queira, você pode conferir <a rel=\"noreferrer noopener\" aria-label=\" (abre numa nova aba)\" href=\"https://replacing-redux-to-hooks.netlify.com/\" target=\"_blank\">a demo</a> de como ficou e o <a rel=\"noreferrer noopener\" aria-label=\" (abre numa nova aba)\" href=\"https://github.com/Sergioamjr/replacing-redux-to-hooks\" target=\"_blank\">repositório</a> com o código final.</p>\n\n\n\n<h3>Vamos ao código.</h3>\n\n\n\n<p>Primeiro, vamos criar os estados do nosso contador e autenticação na nossa store e também seus <em>reducers, types e actions</em>. Eles seguem basicamente o mesmo modelo do Redux, estou apenas usando o padrão Ducks pra manter tudo o que é relacionado no mesmo arquivo.</p>\n\n\n\n<p>Você pode ler mais sobre esse padrão de organização <a rel=\"noreferrer noopener\" aria-label=\"nesse link. (abre numa nova aba)\" href=\"https://github.com/erikras/ducks-modular-redux\" target=\"_blank\">nesse link.</a></p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">//src/store/reducers/auth.js\nexport const authDefault = {\n  auth: {\n    isLogged: false,\n    user: {}\n  }\n};\n\nexport const LOGIN = \"LOGIN\";\nexport const LOGOUT = \"LOGOUT\";\n\nconst authReducer = (state = authDefault, action) => {\n  switch (action.type) {\n    case LOGIN:\n      return {\n        auth: {\n          ...state.auth,\n          isLogged: true,\n          user: action.payload\n        }\n      };\n    case LOGOUT:\n      return {\n        auth: {\n          ...state.auth,\n          isLogged: false,\n          user: {}\n        }\n      };\n    default:\n      return state;\n  }\n};\n\nexport const loginAction = user => {\n  return {\n    type: LOGIN,\n    payload: user\n  };\n};\n\nexport const logoutAction = () => {\n  return {\n    type: LOGOUT\n  };\n};\n\nexport default authReducer;\n</code></pre>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">//src/store/reducers/counter.js\nexport const counterDefault = {\n  counter: 0\n};\n\nexport const INCREMENT = \"INCREMENT\";\nexport const DECREMENT = \"DECREMENT\";\nexport const RESET = \"RESET\";\n\nconst counterReducer = (state = counterDefault, action) => {\n  switch (action.type) {\n    case INCREMENT:\n      return {\n        ...state,\n        counter: state.counter + 1\n      };\n    case DECREMENT:\n      return {\n        ...state,\n        counter: state.counter - 1\n      };\n    case RESET:\n      return {\n        counter: 0\n      };\n    default:\n      return state;\n  }\n};\n\nexport const incrementAction = () => {\n  return {\n    type: INCREMENT\n  };\n};\n\nexport const decrementAction = () => {\n  return {\n    type: DECREMENT\n  };\n};\n\nexport const resetAction = () => {\n  return {\n    type: RESET\n  };\n};\n\nexport default counterReducer;</code></pre>\n\n\n\n<p>Agora vamos criar nossos <em>custom hooks</em>, o primeiro é o <em>useCombinedReducers</em>, responsável por retornar um array com os reducers e um objeto com o valor padrão da nossa store. Aqui iremos utilizar o hook <em>useReducer</em>.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">//src/store/hooks/useCombinedReducers.js\nimport { useReducer } from \"react\";\nimport counterReducer, { counterDefault } from \"./../reducers/counter\";\nimport authReducer, { authDefault } from \"./../reducers/auth\";\n\nconst useCombinedReducers = () => {\n  const [counterStore, counter] = useReducer(counterReducer, counterDefault);\n  const [authStore, auth] = useReducer(authReducer, authDefault);\n\n  return {\n    store: { ...counterStore, ...authStore },\n    reducers: [counter, auth]\n  };\n};\n\nexport default useCombinedReducers;</code></pre>\n\n\n\n<p>Sempre que formos adicionar um novo objeto na nossa store, precisaremos apenas alterar esse arquivo, importando seu reducer, seu valor padrão, passa-los para o <em>useReducer</em> e os retornar na função principal.</p>\n\n\n\n<p>Essa foi a única alteração que eu fiz pro Redux, para tornar nosso componente <em>Provider</em> mais dinâmico e não precisar altera-lo novamente.</p>\n\n\n\n<p>Nosso segundo <em>custom hook</em> é o <em>useStore</em>, responsável por criar e fornecer o context da aplicação através do hook <em>useContext</em>.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">//src/store/hooks/useStore.js\nimport { useContext, createContext } from \"react\";\nimport { authDefault } from \"../reducers/auth\";\nimport { counterDefault } from \"../reducers/counter\";\n\nexport const defaultStore = {\n  store: { ...authDefault, ...counterDefault },\n  dispatch: () => {}\n};\n\nexport const StoreContext = createContext(defaultStore);\nexport default () => {\n  return useContext(storeContext);\n};\n</code></pre>\n\n\n\n<p>Com esse <em>custom hook</em> também será possível acessar diretamente nossa store e o dispatch, além do componente <em>Connect</em>, que vamos criar logo em seguida.</p>\n\n\n\n<p>O <em>Connect</em> injetará nossa store e dispatch nos nossos componentes. Aqui usamos componente <em>StoreContext</em> retornado no nosso hook <em>useStore</em>.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-jsx\">//src/store/connect.js\nimport React from \"react\";\nimport { StoreContext } from \"./hooks/useStore\";\n\nconst returnPropsAsDefault = (store, props) => props;\n\nconst Connect = (mapStateToProps = returnPropsAsDefault) => Component => {\n  return function WrapConnect(props) {\n    return (\n      &lt;StoreContext.Consumer>\n        {({ dispatch, store }) => {\n          const storeProps = mapStateToProps(store, props);\n          return &lt;Component {...storeProps} dispatch={dispatch} />;\n        }}\n      &lt;/StoreContext.Consumer>\n    );\n  };\n};\n\nexport default Connect;</code></pre>\n\n\n\n<p>Ele funcionará semelhante ao do Redux, recebendo o <em>mapStateToProps</em> e o componente que receberá a store.</p>\n\n\n\n<p>Lembrando que o <em>mapStateToProps</em> é uma função que recebe a store e as props originais. Você é responsável por retornar a store inteira ou selecionar os objetos que precise, assim:</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">function mapStateToProps(store, props) {\n  return {\n    ...store,\n    ...props\n  }\n}\n\nexport default Connect(mapStateToProps)(Component)\n</code></pre>\n\n\n\n<p>Caso o <em>mapStateToProps</em> não seja fornecido, sua função padrão <em>returnPropsAsDefault</em> retornará as props originais do componente.</p>\n\n\n\n<p>O próximo componente será nosso <em>Provider</em>, que irá envolver nossa plataforma e tornar nossa store disponível dentro dela. Usamos o hook <em>useCombinedReducers</em> para receber o valor da store e um array com nossos reducers.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-jsx\">//src/store/index.js\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport useCombinedReducers from \"./hooks/useCombinedReducers\";\nimport { StoreContext } from \"./hooks/useStore\";\n\nconst Provider = ({ children }) => {\n  const { store, reducers } = useCombinedReducers();\n\n  const triggerDispatchs = action => {\n    for (let i = 0; i &lt; reducers.length; i++) {\n      reducers[i](action);\n    }\n  };\n\n  return (\n    &lt;StoreContext.Provider\n      value={{\n        store,\n        dispatch: triggerDispatchs\n      }}\n    >\n      {children}\n    &lt;/StoreContext.Provider>\n  );\n};\n\nProvider.propTypes = {\n  children: PropTypes.node.isRequired\n};\n\nexport default Provider;\n</code></pre>\n\n\n\n<p>Apenas explicando, o método <em>triggerDispatchs</em> faz um loop em nossos reducers, passando a <em>action</em> como parâmetro pra cada um deles.</p>\n\n\n\n<p>Também podemos adicionar um <em>middleware</em> nesse arquivo, que servirá pra interceptar nossos <em>dispatchs</em> e fazer qualquer coisa que queremos a partir disso, como uma requisição, disparar outra action, etc.</p>\n\n\n\n<p>Ele será basicamente assim.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">//src/store/middleware.js\nimport { LOGOUT } from \"./reducers/auth\";\nimport { resetAction } from \"./reducers/counter\";\n\nexport default action => dispatch => {\n  if (action.type === LOGOUT) {\n    dispatch(resetAction());\n  }\n\n  dispatch(action);\n};</code></pre>\n\n\n\n<p>Ele é um closure que recebe a <em>action</em> e o <em>dispatch</em>, nesse caso estou disparando a action <em>resetAction</em> caso o type da action original seja <em>LOGOUT</em>.</p>\n\n\n\n<p>Pra o utilizarmos precisamos alterar o arquivo do nosso <em>Provider</em>, importando nosso middleware, criando o método <em>withMiddleware</em> e substituir a atribuição do <em>dispatch</em>.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-jsx\">//src/store/index.js\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport useCombinedReducers from \"./hooks/useCombinedReducers\";\nimport { StoreContext } from \"./hooks/useStore\";\nimport middleware from \"./middleware\";\n\nconst Provider = ({ children }) => {\n  const { store, reducers } = useCombinedReducers();\n\n  const triggerDispatchs = action => {\n    for (let i = 0; i &lt; reducers.length; i++) {\n      reducers[i](action);\n    }\n  };\n\n  const withMiddleware = action => {\n    middleware(action)(triggerDispatchs);\n  };\n\n  return (\n    &lt;StoreContext.Provider\n      value={{\n        store,\n        dispatch: withMiddleware\n      }}\n    >\n      {children}\n    &lt;/StoreContext.Provider>\n  );\n};\n\nProvider.propTypes = {\n  children: PropTypes.node.isRequired\n};\n\nexport default Provider;\n</code></pre>\n\n\n\n<p>Agora só precisamos envolver nossa aplicação com o <em>Provider</em>, dessa maneira.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-jsx\">//src/index.js\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport Provider from \"./store\";\n\nReactDOM.render(\n  &lt;Provider>\n    &lt;App />\n  &lt;/Provider>,\n  document.getElementById(\"root\")\n);</code></pre>\n\n\n\n<p>Nesse ponto já temos tudo o que precisamos configurado para usar a store na nossa aplicação.</p>\n\n\n\n<h4>Conectando nossos componentes</h4>\n\n\n\n<p>Vamos começar conectando nossa store nos nossos componentes <em>Counter, Login e Header.</em></p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-jsx\">//src/container/counter.js\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport ConnectTo from \"../store/connect\";\nimport { decrementAction, incrementAction } from \"../store/reducers/counter\";\n\nconst Counter = ({ dispatch, counter }) => {\n  const decrementHandler = () => dispatch(decrementAction());\n  const incrementHandler = () => dispatch(incrementAction());\n\n  return (\n    &lt;div>\n      &lt;p className=\"number color-dark\">{counter}&lt;/p>\n      &lt;div>\n        &lt;button\n          aria-label=\"Menos 1\"\n          className=\"btn m-left-20 m-right-20\"\n          onClick={decrementHandler}\n        >\n          -\n        &lt;/button>\n        &lt;button\n          aria-label=\"Mais 1\"\n          className=\"btn m-left-20 m-right-20\"\n          onClick={incrementHandler}\n        >\n          +\n        &lt;/button>\n      &lt;/div>\n    &lt;/div>\n  );\n};\n\nCounter.propTypes = {\n  dispatch: PropTypes.func.isRequired,\n  counter: PropTypes.number.isRequired\n};\n\nconst mapStateToProps = ({ counter }, props) => {\n  return {\n    counter,\n    ...props\n  };\n};\n\nexport default ConnectTo(mapStateToProps)(Counter);\n</code></pre>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-jsx\">//src/container/login.js\nimport React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Connect from \"../store/connect\";\nimport { loginAction } from \"../store/reducers/auth\";\n\nconst Login = ({ dispatch }) => {\n  const [name, setName] = useState(\"\");\n  const changeNameHandler = ({ target: { value } }) => setName(value);\n  const onSubmitHandler = () => dispatch(loginAction(name));\n  return (\n    &lt;div>\n      &lt;form>\n        &lt;p className=\"logo p-center m-bottom-20\">\n          Context + useState ={\" \"}\n          &lt;span role=\"img\" aria-label=\"Coração\">\n            ❤️\n          &lt;/span>\n        &lt;/p>\n        &lt;input\n          value={name}\n          onChange={changeNameHandler}\n          type=\"text\"\n          placeholder=\"Nome\"\n          className=\"input\"\n        />\n        &lt;button\n          onClick={onSubmitHandler}\n          disabled={!name}\n          className=\"btn w-100\"\n        >\n          Entrar\n        &lt;/button>\n      &lt;/form>\n    &lt;/div>\n  );\n};\n\nLogin.propTypes = {\n  dispatch: PropTypes.func.isRequired\n};\n\nexport default Connect()(Login);\n</code></pre>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-jsx\">//src/container/header.js\nimport React from \"react\";\nimport { logoutAction } from \"../store/reducers/auth\";\nimport useStore from \"../store/hooks/useStore\";\n\nconst Header = () => {\n  const {\n    dispatch,\n    store: { auth }\n  } = useStore();\n  const logoutHandler = () => dispatch(logoutAction());\n  return (\n    &lt;div className=\"top-position d-flex d-flex-justify-between d-flex-align-center w-100\">\n      &lt;div className=\"container w-100\">\n        &lt;div className=\"d-flex d-flex-justify-between d-flex-align-center w-100\">\n          &lt;p className=\"logo p-center\">\n            Context + useState ={\" \"}\n            &lt;span role=\"img\" aria-label=\"Coração\">\n              ❤️\n            &lt;/span>\n          &lt;/p>\n          &lt;div className=\"d-flex d-flex-align-center\">\n            &lt;p className=\"m-right-10 color-dark\">Olá, {auth.user}&lt;/p>\n            &lt;button onClick={logoutHandler} className=\"btn logout\">\n              Sair\n            &lt;/button>\n          &lt;/div>\n        &lt;/div>\n      &lt;/div>\n    &lt;/div>\n  );\n};\n\nexport default Header;\n</code></pre>\n\n\n\n<p>Se você já usou Redux, deve ser familiar com o que temos aqui; o componente <em>Connect</em> injeta o dispatch e a store, também importamos as <em>actions</em> pra passarmos como seu parâmetro.</p>\n\n\n\n<p>No nosso <em>Header</em> eu estou usando o custom hook <em>useStore</em> pra acessar a store e o dispatch, ao invés do <em>Connect</em>. Fique a vontade pra usar qual preferir 🙂</p>\n\n\n\n<p>Agora vamos colocar todos nossos componentes juntos e criar uma condição pra mostra-los, usando a autenticação da nossa store.</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-jsx\">//src/app.js\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Counter from \"./container/counter\";\nimport Login from \"./container/login\";\nimport Connect from \"./store/connect\";\nimport Header from \"./container/header\";\n\nconst App = ({ auth }) => {\n  return (\n    &lt;div className=\"full-screen\">\n      &lt;div className=\"d-flex d-flex-align-center d-flex-justify-center h-100\">\n        {auth.isLogged ? (\n          &lt;>\n            &lt;Header />\n            &lt;Counter />\n          &lt;/>\n        ) : (\n          &lt;Login />\n        )}\n      &lt;/div>\n    &lt;/div>\n  );\n};\n\nApp.propTypes = {\n  auth: PropTypes.shape({\n    isLogged: PropTypes.bool\n  }).isRequired\n};\n\nconst mapStateToProps = ({ auth }, props) => {\n  return {\n    auth,\n    ...props\n  };\n};\n\nexport default Connect(mapStateToProps)(App);\n</code></pre>\n\n\n\n<p>É isso. Sua aplicação já deve estar funcionando com uma store criada com os hooks nativos do React.</p>\n\n\n\n<p>Você pode ver a demo de como ficou <a href=\"https://replacing-redux-to-hooks.netlify.com/\" target=\"_blank\" rel=\"noreferrer noopener\" aria-label=\" (abre numa nova aba)\">aqui.</a></p>\n\n\n\n<p>Ressaltando que os dois únicos pontos negativos comparados ao Redux é a falta de uma extensão do navegador, como o <a href=\"https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd?hl=pt-BR\" target=\"_blank\" rel=\"noreferrer noopener\" aria-label=\"Redux DevTools (abre numa nova aba)\">Redux DevTools</a>, que nos permite debugar as interações com a store e também a falta de suporte para as actions assíncronas, como <a href=\"https://github.com/reduxjs/redux-thunk\" target=\"_blank\" rel=\"noreferrer noopener\" aria-label=\"redux-thunk (abre numa nova aba)\">redux-thunk</a>.</p>\n\n\n\n<p>Também preciso dizer que dependendo do tamanho e complexidade da sua aplicação, usar o Redux poderá ser mais perfomatico do que os hooks.</p>\n\n\n\n<p>Espero que não fique decepcionado comigo por causa desses pontos.</p>\n\n\n\n<p>Todo esse exemplo está <a href=\"https://github.com/Sergioamjr/replacing-redux-to-hooks\" target=\"_blank\" rel=\"noreferrer noopener\" aria-label=\" (abre numa nova aba)\">nesse repositório</a>, fique a vontade pra baixa-lo, usa-lo, compartilha-lo e deixar uma star.</p>\n\n\n\n<p>Qualquer sugestão, crítica ou comentário é super bem vindo, compartilhe comigo nos comentários a baixo.</p>\n\n\n\n<p>Até breve.</p>\n","excerpt":"<p>Em 2019 eu estava aprendendo os React Hooks e resolvi substituir o gerenciamento de estado de uma simples aplicação que eu estava fazendo de Redux com os Hooks. Eu não fazia idéia de como faria mas no final das contas deu super certo. Consegui replicar os conceitos de reducers, actions, types, middleware, mapStateToProps e escrevi [&hellip;]</p>\n","date":"01-21-2020","featured_media":{"localFile":{"childImageSharp":{"resolutions":{"src":"/static/6ab18a3b7fdbd04ff6f656cafc14414d/48cea/road-4598095_1280.jpg"}}}},"acf":{"translation":"/posts_en/replacing-redux-to-react-hooks"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"b435b543-305b-5d2a-9fb5-a4178353189a"}}}